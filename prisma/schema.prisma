generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  cpf        String      @unique
  phone      Decimal
  created_at DateTime    @default(now())
  favorities Favorities?
  requests   Requests[]
  address    Address[]
  Session    Session[]
  Contact    Contact[]
  Historic   Historic[]

  @@map("user")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("session")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  image    String
  products Products[]

  @@map("category")
}

model Products {
  id              Int               @id @default(autoincrement())
  name            String
  price           Decimal
  description     String
  Assessments     String
  category        Category[]
  favorities      Favorities[]
  requests        Requests[]
  stoke           Decimal?
  ProductQuantity ProductQuantity[]
  PriceHistory    PriceHistory[]
  images          ProductImage[]
  Historic        Historic[]

  @@map("product")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Products @relation(fields: [productId], references: [id])
  productId Int

  @@map("product_image")
}

model Favorities {
  id       Int        @id @default(autoincrement())
  products Products[]
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique

  @@map("favorities")
}

model Requests {
  id                Int               @id @default(autoincrement())
  products          Products[]
  created_at        DateTime          @default(now())
  user              User              @relation(fields: [userId], references: [id])
  userId            Int
  total             Decimal
  message           String?
  Address           Address           @relation(fields: [addressId], references: [id])
  addressId         Int
  deliveryType      DeliveryType?
  orderStatus       OrderStatus?
  payment           PaymentMethod?
  productQuantities ProductQuantity[]
  Contact           Contact[]

  @@map("request")
}

model ProductQuantity {
  id        Int      @id @default(autoincrement())
  request   Requests @relation(fields: [requestId], references: [id])
  requestId Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int

  @@map("product_quantity")
}

model PriceHistory {
  id            Int      @id @default(autoincrement())
  previousPrice Decimal
  newPrice      Decimal
  created_at    DateTime @default(now())
  product       Products @relation(fields: [productId], references: [id])
  productId     Int

  @@map("price_history")
}

enum DeliveryType {
  STANDARD
  EXPRESS
  SUPER_EXPRESS
}

enum PaymentMethod {
  CREDCARD
  TICKET
  PIX
}

enum OrderStatus {
  IN_ANALYSIS
  IN_TRANSIT
  DELIVERED
}

model Address {
  id             Int        @id @default(autoincrement())
  cep            Int
  address        String
  name_recipient String
  number         Int
  district       String
  city           String
  uf             String
  complement     String?
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  request        Requests[]
  primary        Boolean?

  @@map("address")
}

model Contact {
  id         Int      @id @default(autoincrement())
  message    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  request    Requests @relation(fields: [requestId], references: [id])
  requestId  Int
  created_at DateTime @default(now())

  @@map("contact")
}

model Historic {
  id         Int      @id @default(autoincrement())
  product    Products @relation(fields: [productsId], references: [id])
  productsId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())

  @@map("historic")
}
